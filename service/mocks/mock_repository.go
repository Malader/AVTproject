// Code generated by MockGen. DO NOT EDIT.
// Source: AVTproject/service (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "AVTproject/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddPurchase mocks base method.
func (m *MockRepository) AddPurchase(arg0 context.Context, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPurchase", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPurchase indicates an expected call of AddPurchase.
func (mr *MockRepositoryMockRecorder) AddPurchase(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPurchase", reflect.TypeOf((*MockRepository)(nil).AddPurchase), arg0, arg1, arg2)
}

// AddTransaction mocks base method.
func (m *MockRepository) AddTransaction(arg0 context.Context, arg1, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransaction", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransaction indicates an expected call of AddTransaction.
func (mr *MockRepositoryMockRecorder) AddTransaction(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransaction", reflect.TypeOf((*MockRepository)(nil).AddTransaction), arg0, arg1, arg2, arg3)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(arg0 context.Context, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), arg0, arg1, arg2)
}

// GetUserByID mocks base method.
func (m *MockRepository) GetUserByID(arg0 context.Context, arg1 int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepository)(nil).GetUserByID), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockRepository) GetUserByUsername(arg0 context.Context, arg1 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockRepositoryMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockRepository)(nil).GetUserByUsername), arg0, arg1)
}

// GetUserPurchases mocks base method.
func (m *MockRepository) GetUserPurchases(arg0 context.Context, arg1 int) ([]models.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPurchases", arg0, arg1)
	ret0, _ := ret[0].([]models.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPurchases indicates an expected call of GetUserPurchases.
func (mr *MockRepositoryMockRecorder) GetUserPurchases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPurchases", reflect.TypeOf((*MockRepository)(nil).GetUserPurchases), arg0, arg1)
}

// GetUserTransactions mocks base method.
func (m *MockRepository) GetUserTransactions(arg0 context.Context, arg1 int) ([]models.Transaction, []models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTransactions", arg0, arg1)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].([]models.Transaction)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserTransactions indicates an expected call of GetUserTransactions.
func (mr *MockRepositoryMockRecorder) GetUserTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTransactions", reflect.TypeOf((*MockRepository)(nil).GetUserTransactions), arg0, arg1)
}

// UpdateUserCoins mocks base method.
func (m *MockRepository) UpdateUserCoins(arg0 context.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCoins", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCoins indicates an expected call of UpdateUserCoins.
func (mr *MockRepositoryMockRecorder) UpdateUserCoins(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCoins", reflect.TypeOf((*MockRepository)(nil).UpdateUserCoins), arg0, arg1, arg2)
}
